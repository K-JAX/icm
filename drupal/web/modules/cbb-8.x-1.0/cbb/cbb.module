<?php

/**
 * @file
 * Add support for Cookie Based Blocks.
 *
 * Cookie Based Blocks (cbb for short) allows users to add cookie based display
 * to any block through the block's configuration interface.
 */

use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_permission().
 */
function cbb_permission() {
  return array(
    'administer cookie based blocks' => array(
      'title' => t('Administer cookie based blocks'),
      'description' => t('Set Cookie based parameters for blocks.'),
    ),
  );
}

/**
 * Implements hook_block_view_alter().
 */
function cbb_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
	// Get the complete block
	/** @var \Drupal\block\Entity\Block $bl */
	if ( $build['#block']->getThirdPartySetting( 'cbb', 'cbb_use', FALSE ) ) {
		// https://www.drupal.org/project/drupal/issues/2626224
		$build['#pre_render'][] = '_cbb_block_view_alter_pre_render';
	}
}

/**
 * Pre-render callback for block cbb enabled blocks.
 */
function _cbb_block_view_alter_pre_render(array $build) {
    if (isset($build['content']) && is_string($build['content'])) {
      if (empty($build['content'])) {
        return;
      }

      $build['content'] = array(
        '#markup' => $build['content'],
      );
    }

    $build['#attached']['library'] = [
      'cbb/cbb',
    ];

    // TODO: fix this: fetch the getThirdPartySetting for some reason
    $block = Block::load($build['#id']);
	$build['#attached']['drupalSettings']['cbb'] = array(
    Html::cleanCssIdentifier('block-' . $build['#id']) => array(
	    'cbb_expose_after' => $block->getThirdPartySetting( 'cbb', 'cbb_expose_after', '5 minutes'),
	    'cbb_expose_delay' => $block->getThirdPartySetting( 'cbb', 'cbb_expose_delay', '0 minutes'),
	    'cbb_use_colorbox' => $block->getThirdPartySetting( 'cbb', 'cbb_use_colorbox', false),
	  ),
	);

	return $build;
}

/**
 * Implements hook_preprocess_block().
 */
function cbb_preprocess_block(&$variables) {
  // Blocks coming from page manager widget does not have id.
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);

    if ($block->getThirdPartySetting('cbb', 'cbb_use', false)) {
      $variables['attributes']['class'][] = 'block-cbb';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cbb_form_block_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::currentUser()->hasPermission('administer cookie based blocks')) {

    /** @var \Drupal\block\BlockInterface $block */
    $block = $form_state->getFormObject()->getEntity();

    // This will automatically be saved in the third party settings.
    $form['third_party_settings']['#tree'] = TRUE;

    $cbb_settings = $block->getThirdPartySettings('cbb');
    $form['third_party_settings']['cbb']['cbb_use'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Cookie Based Block.'),
      '#default_value' => $block->getThirdPartySetting('cbb', 'cbb_use', false),
    );

    $form['third_party_settings']['cbb']['cbb_expose_after'] = array(
      '#type' => 'textfield',
      '#title' => t('Show block again after previous exposure.'),
      '#description' => t('Use PHP style duration like "7 days", "1 week". See PHP strtotime function for more info.'),
      '#default_value' => $block->getThirdPartySetting('cbb', 'cbb_expose_after', "1 day"),
      '#states' => array(
        'invisible' => array(
          ':input[name="third_party_settings[cbb][cbb_use]"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['third_party_settings']['cbb']['cbb_expose_delay'] = array(
      '#type' => 'number',
      '#title' => t('Delay block display for n seconds.'),
      '#required' => true,
      '#default_value' => $block->getThirdPartySetting('cbb', 'cbb_expose_delay', 0),
      '#states' => array(
        'invisible' => array(
          ':input[name="third_party_settings[cbb][cbb_use]"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['third_party_settings']['cbb']['cbb_use_colorbox'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the jQuery.colorbox() function if exists.'),
      '#description' => t('When jQuery.colorbox() function is available we use it.'),
      '#default_value' => $block->getThirdPartySetting('cbb', 'cbb_use_colorbox', FALSE),
      '#states' => array(
        'invisible' => array(
          ':input[name="third_party_settings[cbb][cbb_use]"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['#validate'][] = 'cbb_form_validate';
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function cbb_form_validate(array $form, FormStateInterface &$form_state) {
  $values = $form_state->getValues();
  if ($values['form_id'] == 'block_form' || $values['form_id'] == 'block_add_block_form') {
    $cbb = $values['third_party_settings']['cbb'];
    if ($cbb['cbb_use'] && \Drupal::currentUser()->hasPermission('administer cookie based blocks')) {
      if (isset($cbb['cbb_use']) && $cbb['cbb_use']) {

        $cbb_expose_after = $cbb['cbb_expose_after'];
        $cbb_expose_after = preg_replace('!\s+!', ' ', $cbb_expose_after);
        $cbb_expose_after = trim($cbb_expose_after);

        $values = explode(" ", $cbb_expose_after);
        if (count($values) != 2) {
          $form_state->setErrorByName('cbb_expose_after', "This needs a number separated by a string.");
        }
        else {
          $steps = $values[0];
          $period = $values[1];

          if ('' . intval($steps) != $steps || intval($steps) <= 0) {
            $form_state->setErrorByName('cbb_expose_after', t("First value '%steps' should be a positive integer", array('%steps' => $steps)));
          }

          $lookup = array('minutes', 'hours', 'days', 'weeks');
          if (!in_array($period, $lookup) && !in_array($period . 's', $lookup)) {
            $form_state->setErrorByName('cbb_expose_after', t("Second value should be a duration: %periods", array('%periods' => join(', ', $lookup))));
          }
        }

        $form_state->setValueForElement($form['third_party_settings']['cbb']['cbb_expose_after'], $cbb_expose_after);

        // We cannot make field required so it could be empty so we MUST validate
        $cbb_expose_delay = $cbb['cbb_expose_delay'];
        if ('' . intval($cbb_expose_delay) != $cbb_expose_delay || intval($cbb_expose_delay) < 0) {
          $form_state->setErrorByName('cbb_expose_after', t("The delay value '%cbb_expose_delay' should be a non negative integer", array('%cbb_expose_delay' => $cbb_expose_delay)));
        }
        $form_state->setValueForElement($form['third_party_settings']['cbb']['cbb_expose_delay'], $cbb_expose_delay);
      }
    }
  }
}
